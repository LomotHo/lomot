/*BY LOMOT*/
`include "header/nettype.h.v"
`include "header/stddef.h.v"
	`define 	HIGH					1'b1
	`define		LOW						1'b0
	`define 	DISABLE					1'b0
	`define 	ENABLE					1'b1
	`define 	DISABLE_				1'b1
	`define 	ENABLE_					1'b0
	`define 	READ					1'b1
	`define 	WRITE					1'b0
	`define 	LSB						0
	`define 	BYTE_DATA_W				8
	`define 	BYTE_MSB				7
	`define 	ByteDataBus				7:0
	`define 	WORD_DATA_W				32
	`define 	WORD_MSB 				31
	`define 	WordDataBus				31:0
	`define 	WORD_ADDR_W 			30
	`define 	WORD_ADDR_MSB 			29
	`define 	WordAddrBus 			29:0
	`define 	BYTE_OFFSET_W 			2
	`define 	ByteOffsetBus 			1:0
	`define 	WordAddrLoc 			31:2
	`define 	ByteOffsetLoc 			1:0
	`define 	BYTE_OFFSET_WORD 		2'b00
`include "header/bus.h.v"
	`define		BUS_MASTER_CH					4
	`define		BUS_MASTER_INDEX_W				2
	`define		BUS_OWNER_MASTER_0				2'h0
	`define		BUS_OWNER_MASTER_1				2'h1
	`define		BUS_OWNER_MASTER_2				2'h2
	`define		BUS_OWNER_MASTER_3				2'h3
	`define		BUS_SLAVE_CH					8
	`define		BUS_SLAVE_INDEX_W				3

	`define		BUS_SLAVE_0						0
	`define		BUS_SLAVE_1						1
	`define		BUS_SLAVE_2						2
	`define		BUS_SLAVE_3						3
	`define		BUS_SLAVE_4						4
	`define		BUS_SLAVE_5						5
	`define		BUS_SLAVE_6						6
	`define		BUS_SLAVE_7						7

	`define		BusOwnerBus						1:0
	`define		BusSlaveIndexBus				2:0
	`define		BusSlaveIndexLoc				29:27
`include "header/global_config.h.v"
	/*BY LOMOT*/
		`ifdef POSITIVE_RESET
			`define		RESET_EDGE				posedge	
			`define		RESET_ENABLE			1'b1	
			`define		RESET_DISABLE			1'b0
		`endif

		`ifdef NEGEATIVE_RESET
			`define		RESET_EDGE				negedge	
			`define		RESET_ENABLE			1'b0	
			`define		RESET_DISABLE			1'b1
		`endif

		`ifdef POSITIVE_MEMORY
			`define		MEM_ENABLE				1'b1
			`define		MEM_DISABLE				1'b0
		`endif

		`ifdef NEGEATIVE_MEMORY
			`define		MEM_ENABLE				1'b0
			`define		MEM_DISABLE				1'b1
		`endif

		`ifdef IMPLEMENT_TIMER
			//
		`endif

		`ifdef IMPLEMENT_UART
			//
		`endif

		`ifdef IMPLEMENT_GPIO
			//
		`endif
`define  NEGEATIVE_RESET
module bus_slave_mux(
	s0_cs_,s0_rd_data,s0_rdy_
	,s1_cs_,s1_rd_data,s1_rdy_
	,s2_cs_,s2_rd_data,s2_rdy_
	,s3_cs_,s3_rd_data,s3_rdy_
	,s4_cs_,s4_rd_data,s4_rdy_
	,s5_cs_,s5_rd_data,s5_rdy_
	,s6_cs_,s6_rd_data,s6_rdy_
	,s7_cs_,s7_rd_data,s7_rdy_
	,m_rd_data,m_rdy_
	);
	input wire s0_cs_;
	input wire [WordDataBus] s0_rd_data;
	input wire s0_rdy_;

	input wire s1_cs_;
	input wire [WordDataBus] s1_rd_data;
	input wire s1_rdy_;

	input wire s2_cs_;
	input wire [WordDataBus] s2_rd_data;
	input wire s2_rdy_;

	input wire s3_cs_;
	input wire [WordDataBus] s3_rd_data;
	input wire s3_rdy_;

	input wire s4_cs_;
	input wire [WordDataBus] s4_rd_data;
	input wire s4_rdy_;

	input wire s5_cs_;
	input wire [WordDataBus] s5_rd_data;
	input wire s5_rdy_;

	input wire s6_cs_;
	input wire [WordDataBus] s6_rd_data;
	input wire s6_rdy_;

	input wire s7_cs_;
	input wire [WordDataBus] s7_rd_data;
	input wire s7_rdy_;

	output reg [WordDataBus] m_rd_data;
	output reg 					m_rdy_;

	always @(*) begin
		if 		(s0_cs_ == `ENABLE_) begin
			m_rd_data 	= s0_rd_data;
			m_rdy_ 		= s0_rdy_;
		end

		else if (s1_cs_ == `ENABLE_) begin
			m_rd_data 	= s1_rd_data;
			m_rdy_ 		= s1_rdy_;
		end

		else if (s2_cs_ == `ENABLE_) begin
			m_rd_data 	= s2_rd_data;
			m_rdy_ 		= s2_rdy_;
		end

		else if (s3_cs_ == `ENABLE_) begin
			m_rd_data 	= s3_rd_data;
			m_rdy_ 		= s3_rdy_;
		end

		else if (s4_cs_ == `ENABLE_) begin
			m_rd_data 	= s4_rd_data;
			m_rdy_ 		= s4_rdy_;
		end

		else if (s5_cs_ == `ENABLE_) begin
			m_rd_data 	= s5_rd_data;
			m_rdy_ 		= s5_rdy_;
		end

		else if (s6_cs_ == `ENABLE_) begin
			m_rd_data 	= s6_rd_data;
			m_rdy_ 		= s6_rdy_;
		end

		else if (s7_cs_ == `ENABLE_) begin
			m_rd_data 	= s7_rd_data;
			m_rdy_ 		= s7_rdy_;
		end

		else begin
			m_rd_data 	= `WORD_DATA_W'h0;
			m_rdy_ 		= `DISABLE_;
		end
	end

endmodule
